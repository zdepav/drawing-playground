<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE help SYSTEM "help.dtd">
<help>
  <section title="JavaScript API">
    <type name="Path2D">
      <summary>
        The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a <a href="type:CanvasRenderingContext2D">CanvasRenderingContext2D</a> object. The path methods of the <a href="type:CanvasRenderingContext2D">CanvasRenderingContext2D</a> interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
      </summary>
      <constructor>
        <summary>Creates empty path.</summary>
      </constructor>
      <constructor>
        <summary>Creates a copy of the given path.</summary>
        <param name="path" type="Path2D">The path to copy</param>
      </constructor>
      <method name="addPath">
        <summary>Adds a path to the current path.</summary>
        <param name="path" type="Path2D">A Path2D path to add</param>
        <param name="transform" type="SVGMatrix">An SVGMatrix to be used as the transformation matrix for the path that is added</param>
      </method>
      <method name="closePath">
        <summary>
          Causes the point of the pen to move back to the start of the current sub-path.
          It tries to draw a straight line from the current point to the start.
          If the shape has already been closed or has only one point, this function does nothing.
        </summary>
      </method>
      <method name="moveTo">
        <summary>Moves the starting point of a new sub-path to the (x, y) coordinates.</summary>
        <param name="x" type="float">The x-axis (horizontal) coordinate of the point</param>
        <param name="y" type="float">The y-axis (vertical) coordinate of the point</param>
      </method>
      <method name="lineTo">
        <summary>Connects the last point in the subpath to the (x, y) coordinates with a straight line.</summary>
        <param name="x" type="float"></param>
        <param name="y" type="float"></param>
      </method>
      <method name="bezierCurveTo">
        <summary>
          Adds a cubic Bézier curve to the path. It requires three points.
          The first two points are control points and the third one is the end point.
          The starting point is the last point in the current path,
          which can be changed using moveTo() before creating the Bézier curve.
        </summary>
        <param name="cp1x" type="float">The x-axis coordinate of the first control point</param>
        <param name="cp1y" type="float">The y-axis coordinate of the first control point</param>
        <param name="cp2x" type="float">The x-axis coordinate of the second control point</param>
        <param name="cp2y" type="float">The y-axis coordinate of the second control point</param>
        <param name="x" type="float">The x-axis coordinate of the end point</param>
        <param name="y" type="float">The y-axis coordinate of the end point</param>
      </method>
      <method name="quadraticCurveTo">
        <summary>Adds a quadratic Bézier curve to the current path.</summary>
        <param name="cpx" type="float">The x-axis coordinate of the control point</param>
        <param name="cpy" type="float">The y-axis coordinate of the control point</param>
        <param name="x" type="float">The x-axis coordinate of the end point</param>
        <param name="y" type="float">The y-axis coordinate of the end point</param>
      </method>
      <method name="arc">
        <summary>
          Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle
          and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).
        </summary>
        <param name="x" type="float">The horizontal coordinate of the arc's center</param>
        <param name="y" type="float">The vertical coordinate of the arc's center</param>
        <param name="radius" type="float">The arc's radius. Must be positive</param>
        <param name="startAngle" type="float">The angle at which the arc starts in radians, measured from the positive x-axis</param>
        <param name="endAngle" type="float">The angle at which the arc ends in radians, measured from the positive x-axis</param>
        <param name="anticlockwise" type="bool" optional="true">
          An optional Boolean. If true, draws the arc counter-clockwise between the start and end angles.
          The default is false (clockwise).
        </param>
      </method>
      <method name="arcTo">
        <summary>Adds a circular arc to the path with the given control points and radius, connected to the previous point by a straight line.</summary>
        <param name="x1" type="float"></param>
        <param name="y1" type="float"></param>
        <param name="x2" type="float"></param>
        <param name="y2" type="float"></param>
        <param name="radius" type="float"></param>
      </method>
      <method name="ellipse">
        <summary>
          Adds an elliptical arc to the path which is centered at (x, y) position with the radii radiusX and radiusY starting
          at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).
        </summary>
        <param name="x" type="float">The x-axis (horizontal) coordinate of the ellipse's center</param>
        <param name="y" type="float">The y-axis (vertical) coordinate of the ellipse's center</param>
        <param name="radiusX" type="float">The ellipse's major-axis radius. Must be non-negative</param>
        <param name="radiusY" type="float">The ellipse's minor-axis radius. Must be non-negative</param>
        <param name="rotation" type="float">The rotation of the ellipse, expressed in radians</param>
        <param name="startAngle" type="float">The angle at which the ellipse starts, measured clockwise from the positive x-axis and expressed in radians</param>
        <param name="endAngle" type="float">The angle at which the ellipse ends, measured clockwise from the positive x-axis and expressed in radians</param>
        <param name="anticlockwise" type="bool" optional="true">
          An optional Boolean which, if true, draws the ellipse anticlockwise (counter-clockwise).
          The default value is false (clockwise).
        </param>
      </method>
      <method name="rect">
        <summary>Creates a path for a rectangle at position (x, y) with a size that is determined by width and height.</summary>
        <param name="x" type="float">The x-axis coordinate of the rectangle's starting point</param>
        <param name="y" type="float">The y-axis coordinate of the rectangle's starting point</param>
        <param name="width" type="float">The rectangle's width. Positive values are to the right, and negative to the left</param>
        <param name="height" type="float">The rectangle's height. Positive values are down, and negative are up</param>
      </method>
    </type>
    <type name="SVGMatrix">
      <summary>
        Many of SVG's graphics operations utilize 2x3 matrices of the form:<br/>
        <code>[a c e]<br/>[b d f]</code><br/>
        which, when expanded into a 3x3 matrix for the purposes of matrix arithmetic, become:<br/>
        <code>[a c e]<br/>[b d f]<br/>[0 0 1]</code>
      </summary>
      <property name="a" type="float">
        <summary>A float representing the a component of the matrix.</summary>
      </property>
      <property name="b" type="float">
        <summary>A float representing the b component of the matrix.</summary>
      </property>
      <property name="c" type="float">
        <summary>A float representing the c component of the matrix.</summary>
      </property>
      <property name="d" type="float">
        <summary>A float representing the d component of the matrix.</summary>
      </property>
      <property name="e" type="float">
        <summary>A float representing the e component of the matrix.</summary>
      </property>
      <property name="f" type="float">
        <summary>A float representing the f component of the matrix.</summary>
      </property>
      <method name="multiply">
        <summary>
          Performs matrix multiplication.
          This matrix is post-multiplied by another matrix, returning the resulting new matrix as SVGMatrix.
        </summary>
        <param name="secondMatrix" type="SVGMatrix">Matrix to multiply by</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="inverse">
        <summary>Returns the inverse matrix as SVGMatrix.</summary>
        <returns type="SVGMatrix">Inverse matrix or null if it doesn't exist</returns>
      </method>
      <method name="translate">
        <summary>Post-multiplies a translation transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="x" type="float">The x-axis coordinate of the translation vector</param>
        <param name="y" type="float">The y-axis coordinate of the translation vector</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="scale">
        <summary>Post-multiplies a uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="s" type="float">Scale</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="scaleNonUniform">
        <summary>Post-multiplies a non-uniform scale transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="x" type="float">Horizontal scale</param>
        <param name="y" type="float">Vertical scale</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="rotate">
        <summary>Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="degrees" type="float">Angle in degrees</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="rotateFromVector">
        <summary>
          Post-multiplies a rotation transformation on the current matrix and returns the resulting matrix as SVGMatrix.
          The rotation angle is determined by taking (+/-) atan(y/x).
          The direction of the vector (x, y) determines whether the positive or negative angle value is used.
        </summary>
        <param name="x" type="float">The x-axis coordinate of the vector</param>
        <param name="y" type="float">The y-axis coordinate of the vector</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="flipX">
        <summary>Post-multiplies the transformation [-1 0 0 1 0 0] and returns the resulting matrix as SVGMatrix.</summary>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="flipY">
        <summary>Post-multiplies the transformation [1 0 0 -1 0 0] and returns the resulting matrix as SVGMatrix.</summary>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="skewX">
        <summary>Post-multiplies a skewX transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="degrees" type="float">Angle in degrees</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
      <method name="skewY">
        <summary>Post-multiplies a skewY transformation on the current matrix and returns the resulting matrix as SVGMatrix.</summary>
        <param name="degrees" type="float">Angle in degrees</param>
        <returns type="SVGMatrix">Result of the multiplication</returns>
      </method>
    </type>
  </section>
</help>
